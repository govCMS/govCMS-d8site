<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_html().
 */
function govcms_uikit_starterkit_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
}

/**
 * Implements hook_preprocess_page().
 */
function govcms_uikit_starterkit_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
  }

  // Sidebars.
  $variables['has_sidebar'] = FALSE;
  $variables['main_attributes'] = new Attribute();
  $variables['sidebar_first_attributes'] = new Attribute();
  $variables['content_attributes'] = new Attribute();
  $variables['sidebar_second_attributes'] = new Attribute();
  $has_first = !empty($variables['page']['sidebar_first']);
  $has_second = !empty($variables['page']['sidebar_second']);

  if ($has_first || $has_second) {
    $variables['has_sidebar'] = TRUE;
    // Main wrapper.
    $variables['attributes']['class'][] = 'uikit-grid';
    $variables['main_attributes']->addClass('container');

    if ($has_first && !$has_second) {
      // Only first.
      $variables['sidebar_first_attributes']->addClass('col-md-3');
      $variables['content_attributes']->addClass('col-md-9');
    }
    elseif (!$has_first && $has_second) {
      // Only second.
      $variables['sidebar_second_attributes']->addClass('col-md-3');
      $variables['content_attributes']->addClass('col-md-9');
    }
    elseif ($has_first && $has_second) {
      // First and second.
      $variables['sidebar_first_attributes']->addClass('col-md-2');
      $variables['sidebar_second_attributes']->addClass('col-md-2');
      $variables['content_attributes']->addClass('col-md-8');
    }
  }
}

/**
 * Implements template_preprocess_block().
 */
function govcms_uikit_starterkit_preprocess_block(&$variables) {
  // Main navigation block to use a unique template for the top menu.
  if (!empty($variables['attributes']['id']) && $variables['attributes']['id'] === 'block-govcms-uikit-starterkit-main-menu') {
    $block = Block::load($variables['elements']['#id']);
    $region = $block->getRegion();
    $variables['content']['#attributes']['block'] = $region;
  }
  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = Html::cleanCssIdentifier('block--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function govcms_uikit_starterkit_preprocess_node(&$variables) {
  // Helper variables for multiple nodes.
  if (!empty($variables['elements']['#entity_type'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['elements']['#node'];
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(('entity--type-' . $node->getType()));

  if (!empty($variables['content']['field_agency']) && $node->getType() === 'testimonial') {
    foreach (Element::children($variables['content']['field_agency']) as $key) {
      $element = $variables['content']['field_agency'][$key];
      /** @var Drupal\taxonomy\Entity\Term $term */
      $term = $element['#taxonomy_term'];
      $term->setName(NULL);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function govcms_uikit_starterkit_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['#theme'] = ['node_edit_form'];
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed'     => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author'      => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
        ->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_alter() for views_exposed_form.
 */
function govcms_uikit_starterkit_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == "views-exposed-form-search-page") {
    $form['actions']['submit']['#prefix'] = '<span class="icon icon-search"></span>';
  }
  elseif ($form['#id'] == "views-exposed-form-knowledge-base-page-1") {
    $form['#action'] = "/support/knowledge-base";
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function govcms_uikit_starterkit_preprocess_menu(&$variables) {
  // UI Kit.
  if ($variables['menu_name'] === 'main') {
    foreach ($variables['items'] as $key => $value) {
      if ($value['title'] == "Apply now") {
        $variables['items'][$key]['has_button_class'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function govcms_uikit_starterkit_preprocess_form_element(&$variables) {
  $variables['label']['#__element_type'] = $variables['element']['#type'];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function govcms_uikit_starterkit_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}
